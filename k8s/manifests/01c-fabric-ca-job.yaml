apiVersion: batch/v1
kind: Job
metadata:
  name: fabric-ca-cert-generation
  namespace: mediblock
spec:
  ttlSecondsAfterFinished: 600
  template:
    spec:
      serviceAccountName: fabric-cert-generator
      restartPolicy: Never
      volumes:
      - name: cert-output
        persistentVolumeClaim:
          claimName: fabric-ca-certs-pvc
      containers:
      - name: fabric-ca
        image: hyperledger/fabric-ca:latest
        command: ["/bin/sh", "-c"]
        args:
        - |
          # Create output directories
          OUTDIR=/cert-output
          mkdir -p $OUTDIR
          
          # Create directories for MSP structure
          mkdir -p $OUTDIR/orderer/msp/admincerts
          mkdir -p $OUTDIR/orderer/msp/cacerts
          mkdir -p $OUTDIR/orderer/msp/keystore
          mkdir -p $OUTDIR/orderer/msp/signcerts
          mkdir -p $OUTDIR/orderer/msp/tlscacerts
          mkdir -p $OUTDIR/orderer/tls
          
          mkdir -p $OUTDIR/peer0-org1/msp/admincerts
          mkdir -p $OUTDIR/peer0-org1/msp/cacerts
          mkdir -p $OUTDIR/peer0-org1/msp/keystore
          mkdir -p $OUTDIR/peer0-org1/msp/signcerts
          mkdir -p $OUTDIR/peer0-org1/msp/tlscacerts
          mkdir -p $OUTDIR/peer0-org1/tls
          
          # Start Fabric CA Server
          echo "Starting Fabric CA Server..."
          mkdir -p /etc/hyperledger/fabric-ca-server
          fabric-ca-server init -b admin:adminpw --home /etc/hyperledger/fabric-ca-server
          cat > /etc/hyperledger/fabric-ca-server/fabric-ca-server-config.yaml << EOF
          ca:
            name: fabric-ca
            
          signing:
            default:
              usage:
                - digital signature
              expiry: 8760h
            profiles:
              ca:
                usage:
                  - cert sign
                  - crl sign
                  - digital signature
                expiry: 43800h
                caconstraint:
                  isca: true
                  maxpathlen: 0
              tls:
                usage:
                  - digital signature
                  - key encipherment
                  - server auth
                  - client auth
                expiry: 8760h
          
          csr:
            cn: fabric-ca
            names:
              - C: US
                ST: North Carolina
                L: Durham
                O: MediBlockMSP
                OU: Hyperledger Fabric
          EOF
          
          sleep 5
          
          fabric-ca-server start -b admin:adminpw --home /etc/hyperledger/fabric-ca-server &
          
          sleep 5
          
          # Enroll admin user
          echo "Enrolling admin user..."
          export FABRIC_CA_CLIENT_HOME=/tmp/ca-admin
          fabric-ca-client enroll -u http://admin:adminpw@localhost:7054 --home /tmp/ca-admin
          
          # Copy CA certificate to output directories
          cp /tmp/ca-admin/msp/cacerts/localhost-7054.pem $OUTDIR/orderer/msp/cacerts/ca.crt
          cp /tmp/ca-admin/msp/cacerts/localhost-7054.pem $OUTDIR/peer0-org1/msp/cacerts/ca.crt
          cp /tmp/ca-admin/msp/cacerts/localhost-7054.pem $OUTDIR/orderer/msp/tlscacerts/ca.crt
          cp /tmp/ca-admin/msp/cacerts/localhost-7054.pem $OUTDIR/peer0-org1/msp/tlscacerts/ca.crt
          
          # Register and enroll orderer identity
          echo "Registering and enrolling orderer identity..."
          fabric-ca-client register --id.name orderer --id.secret ordererpw --id.type orderer --id.attrs hf.Registrar.Roles=orderer,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert -u http://localhost:7054 --home /tmp/ca-admin
          
          export FABRIC_CA_CLIENT_HOME=/tmp/orderer
          fabric-ca-client enroll -u http://orderer:ordererpw@localhost:7054 --csr.hosts orderer.mediblock.com,orderer,localhost,127.0.0.1 --csr.names O=MediBlockMSP,OU=orderer --home /tmp/orderer
          
          cp -r /tmp/orderer/msp/signcerts/cert.pem $OUTDIR/orderer/msp/signcerts/cert.pem
          cp -r /tmp/orderer/msp/keystore/*_sk $OUTDIR/orderer/msp/keystore/key.pem
          
          # Register and enroll orderer for TLS
          echo "Registering and enrolling orderer for TLS..."
          fabric-ca-client register --id.name orderer-tls --id.secret tlsordpw --id.type orderer -u http://localhost:7054 --home /tmp/ca-admin
          
          export FABRIC_CA_CLIENT_HOME=/tmp/orderer-tls
          fabric-ca-client enroll -u http://orderer-tls:tlsordpw@localhost:7054 --enrollment.profile tls --csr.hosts orderer.mediblock.com,orderer,localhost,127.0.0.1 --csr.names O=MediBlockMSP,OU=orderer --home /tmp/orderer-tls
          
          cp /tmp/orderer-tls/msp/signcerts/cert.pem $OUTDIR/orderer/tls/server.crt
          cp /tmp/orderer-tls/msp/keystore/*_sk $OUTDIR/orderer/tls/server.key
          cp /tmp/orderer-tls/msp/tlscacerts/tls-localhost-7054.pem $OUTDIR/orderer/tls/ca.crt
          
          # Register and enroll peer identity
          echo "Registering and enrolling peer identity..."
          export FABRIC_CA_CLIENT_HOME=/tmp/ca-admin
          fabric-ca-client register --id.name peer0 --id.secret peerpw --id.type peer --id.attrs hf.Registrar.Roles=peer,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert -u http://localhost:7054 --home /tmp/ca-admin
          
          export FABRIC_CA_CLIENT_HOME=/tmp/peer
          fabric-ca-client enroll -u http://peer0:peerpw@localhost:7054 --csr.hosts peer0.org1.mediblock.com,peer0-org1,localhost,127.0.0.1 --csr.names O=MediBlockMSP,OU=peer --home /tmp/peer
          
          cp -r /tmp/peer/msp/signcerts/cert.pem $OUTDIR/peer0-org1/msp/signcerts/cert.pem
          cp -r /tmp/peer/msp/keystore/*_sk $OUTDIR/peer0-org1/msp/keystore/key.pem
          
          # Register and enroll peer for TLS
          echo "Registering and enrolling peer for TLS..."
          fabric-ca-client register --id.name peer0-tls --id.secret tlspeerpw --id.type peer -u http://localhost:7054 --home /tmp/ca-admin
          
          export FABRIC_CA_CLIENT_HOME=/tmp/peer-tls
          fabric-ca-client enroll -u http://peer0-tls:tlspeerpw@localhost:7054 --enrollment.profile tls --csr.hosts peer0.org1.mediblock.com,peer0-org1,localhost,127.0.0.1 --csr.names O=MediBlockMSP,OU=peer --home /tmp/peer-tls
          
          cp /tmp/peer-tls/msp/signcerts/cert.pem $OUTDIR/peer0-org1/tls/server.crt
          cp /tmp/peer-tls/msp/keystore/*_sk $OUTDIR/peer0-org1/tls/server.key
          cp /tmp/peer-tls/msp/tlscacerts/tls-localhost-7054.pem $OUTDIR/peer0-org1/tls/ca.crt
          
          # Register and enroll admin identity
          echo "Registering and enrolling admin identity..."
          export FABRIC_CA_CLIENT_HOME=/tmp/ca-admin
          fabric-ca-client register --id.name admin --id.secret adminpw --id.type admin --id.attrs hf.Registrar.Roles=client,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert -u http://localhost:7054 --home /tmp/ca-admin || true
          
          export FABRIC_CA_CLIENT_HOME=/tmp/admin
          fabric-ca-client enroll -u http://admin:adminpw@localhost:7054 --csr.names O=MediBlockMSP,OU=admin --home /tmp/admin
          
          cp -r /tmp/admin/msp/signcerts/cert.pem $OUTDIR/orderer/msp/admincerts/admin.crt
          cp -r /tmp/admin/msp/signcerts/cert.pem $OUTDIR/peer0-org1/msp/admincerts/admin.crt
          
          # Create MSP config files
          cat > $OUTDIR/orderer/msp/config.yaml << EOF
          NodeOUs:
            Enable: true
            ClientOUIdentifier:
              Certificate: cacerts/ca.crt
              OrganizationalUnitIdentifier: client
            PeerOUIdentifier:
              Certificate: cacerts/ca.crt
              OrganizationalUnitIdentifier: peer
            AdminOUIdentifier:
              Certificate: cacerts/ca.crt
              OrganizationalUnitIdentifier: admin
            OrdererOUIdentifier:
              Certificate: cacerts/ca.crt
              OrganizationalUnitIdentifier: orderer
          EOF
          
          cat > $OUTDIR/peer0-org1/msp/config.yaml << EOF
          NodeOUs:
            Enable: true
            ClientOUIdentifier:
              Certificate: cacerts/ca.crt
              OrganizationalUnitIdentifier: client
            PeerOUIdentifier:
              Certificate: cacerts/ca.crt
              OrganizationalUnitIdentifier: peer
            AdminOUIdentifier:
              Certificate: cacerts/ca.crt
              OrganizationalUnitIdentifier: admin
            OrdererOUIdentifier:
              Certificate: cacerts/ca.crt
              OrganizationalUnitIdentifier: orderer
          EOF
          
          # Fix permissions
          chmod -R 755 $OUTDIR
          
          # Certificate generation completed
          echo "Certificate generation completed successfully."
        volumeMounts:
        - name: cert-output
          mountPath: /cert-output
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: fabric-ca-certs-pvc
  namespace: mediblock
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 100Mi
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: fabric-cert-generator
  namespace: mediblock
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: fabric-cert-generator-role
  namespace: mediblock
rules:
- apiGroups: [""]
  resources: ["secrets", "configmaps"]
  verbs: ["create", "get", "delete"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: fabric-cert-generator-rolebinding
  namespace: mediblock
subjects:
- kind: ServiceAccount
  name: fabric-cert-generator
  namespace: mediblock
roleRef:
  kind: Role
  name: fabric-cert-generator-role
  apiGroup: rbac.authorization.k8s.io 